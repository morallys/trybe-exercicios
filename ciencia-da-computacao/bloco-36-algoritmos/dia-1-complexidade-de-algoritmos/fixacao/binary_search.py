# A estrutura deve estar ordenada para que a busca binÃ¡ria funcione


# Complexidade logarÃ­tmica: O(log n)
def binary_search(numbers, target):
    # definir os Ã­ndices
    start = 0
    end = len(numbers) - 1
    counter = 0

    while start <= end:
        # os Ã­ndices podem ser no mÃ¡ximo iguais, o inÃ­cio nÃ£o pode ultrapassar o fim
        mid = (start + end) // 2  # encontro o meio
        counter += 1

        if numbers[mid] == target:
            # se o elemento do meio for o alvo, devolve a posiÃ§Ã£o do meio
            return f"Meio: {mid} ||| passos: {counter} "

        if target < numbers[mid]:  # se o elemento for menor, atualiza o Ã­ndÃ­ce do fim
            end = mid - 1

        else:  # caso contrÃ¡rio, atualiza o Ã­ndÃ­ce do inicio
            start = mid + 1

    return f"NÃ£o encontrou {-1} ||| passos: {counter} "  # NÃ£o encontrou? Retorna -1


if __name__ == "__main__":
    numbers = [1, 2, 3, 4, 5, 6, 7, 8]
    target = 7

    print(binary_search(numbers, target))


# Anota aÃ­ ğŸ–Š: Quando cortamos a entrada pela metade, a cada iteraÃ§Ã£o, temos um padrÃ£o que segue a funÃ§Ã£o matemÃ¡tica de logaritmo na base dois! Assim, nosso algoritmo Ã© O(log n).
