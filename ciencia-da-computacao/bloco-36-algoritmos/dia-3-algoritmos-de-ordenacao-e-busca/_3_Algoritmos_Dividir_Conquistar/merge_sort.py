# Algoritmos que usam dividir e conquistar

# Algoritmos que utilizam da tÃ©cnica de dividir e conquistar, consistem em dividir um problema grande em partes menores, encontrar soluÃ§Ãµes para as partes menores, e entÃ£o combinar as soluÃ§Ãµes obtidas em uma soluÃ§Ã£o global. Esta tÃ©cnica produz um algoritmo eficiente caso a divisÃ£o e conquista sejam eficientes.

# ðŸ‘€De olho na dica: os algoritmos abaixo foram implementados de forma recursiva, mas lembre-se que toda soluÃ§Ã£o recursiva pode ser reescrita de forma iterativa.


# Merge sort

# A ordenaÃ§Ã£o por mistura (merge sort), Ã© um algoritmo onde empregamos a tÃ©cnica da divisÃ£o e conquista. Vamos dividindo a nossa coleÃ§Ã£o em porÃ§Ãµes menores atÃ© atingirmos uma coleÃ§Ã£o mÃ­nima. Em seguida, vamos misturando as porÃ§Ãµes de forma ordenada atÃ© que toda a coleÃ§Ã£o seja reunida novamente, resultando na ordenaÃ§Ã£o.


def merge_sort(numbers, start=0, end=None):
    if end is None:
        end = len(numbers)

    if (end - start) > 1:  # se nÃ£o reduzi o suficiente, continua
        mid = (start + end) // 2  # encontrando o meio

        merge_sort(numbers, start, mid)  # dividindo as listas
        merge_sort(numbers, mid, end)
        merge(numbers, start, mid, end)  # unindo as listas


# funÃ§Ã£o auxiliar que realiza a mistura dos dois arrays


def merge(numbers, start, mid, end):
    left = numbers[start:mid]  # indexando a lista da esquerda
    right = numbers[mid:end]  # indexando a lista da direita

    left_index, right_index = 0, 0  # as duas listas comeÃ§arÃ£o do inÃ­cio

    for general_index in range(start, end):
        # percorrer sobre a lista inteira como se fosse uma

        if left_index >= len(left):
            # se os elementos da esquerda acabaram, preenche o restante com a lista da direita
            numbers[general_index] = right[right_index]
            right_index = right_index + 1

        elif right_index >= len(right):
            # se os elementos da direita acabaram, preenche o restante com a lista da esquerda
            numbers[general_index] = left[left_index]
            left_index = left_index + 1

        elif left[left_index] < right[right_index]:
            # se o elemento do topo da esquerda for menor que o da direita, ele serÃ¡ o escolhido
            numbers[general_index] = left[left_index]
            left_index = left_index + 1

        else:
            numbers[general_index] = right[right_index]
            # caso o da direita seja menor, ele serÃ¡ o escolhido
            right_index = right_index + 1


if __name__ == "__main__":
    numbers = [7, 5, 9, 2, 6, 8]
    print(f"Lista inicial: {numbers}")

    merge_sort(numbers, 0, len(numbers))
    print(f"Lista final: {numbers}")
