# Informalmente, um algoritmo √© qualquer procedimento computacional bem definido que toma algum valor ou conjunto de valores como entrada e produz algum valor ou conjunto de valores como sa√≠da. Portanto, um algoritmo √© uma sequ√™ncia de etapas computacionais que transformam a entrada na sa√≠da" (CLRS - Introduction to Algorithms)


# Anota a√≠ üñä: A fun√ß√£o sum_array recebe um array de n√∫meros, percorre-o e executa a soma de cada um de seus valores (number), retornando a soma de todos os n√∫meros pertencentes ao array.


# Complexidade de tempo Linear: O(n)
def sum_array(numbers):
    sum = 0
    for number in numbers:
        sum += number

    return sum


if __name__ == "__main__":
    ...

# sum_array, mesmo que a entrada de dados fosse crescendo, sua sa√≠da nunca ocuparia mais espa√ßo, pois o retorno era sempre um n√∫mero s√≥. Sendo assim, sua Complexidade de Espa√ßo ser√° constante e pode ser representada pela nota√ß√£o O(1).

# Anota a√≠ üñä: A Ordem de Complexidade nada mais √© do que a representa√ß√£o dessa propor√ß√£o (ou taxa) de crescimento. Dado que o algoritmo √© linearmente proporcional ao tempo de execu√ß√£o, dizemos que este √© um algoritmo linear.

# A Ordem de Complexidade pode ser chamada, tamb√©m, de Complexidade Assint√≥tica.
