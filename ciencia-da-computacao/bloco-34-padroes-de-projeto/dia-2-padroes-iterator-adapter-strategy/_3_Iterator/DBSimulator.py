# Iterator

# Imagine a situa√ß√£o: voc√™ est√° em um time de desenvolvimento e suas habilidades envolvidas na cria√ß√£o de c√≥digos limpos e reutiliz√°veis ser√£o bem-vindas. O primeiro desafio est√° relacionada √† cobran√ßa de clientes, e em uma reuni√£o a dor da equipe √© compartilhada:

# _____________
# Costum√°vamos fazer os relat√≥rios de cobran√ßa a clientes de forma manual, mas isso se tornou imposs√≠vel com o constante crescimento de clientes que come√ßou h√° 3 meses. Estamos com um atraso de 3 meses de relat√≥rio! Agora nossa empresa comprou uma ferramenta autom√°tica de relat√≥rios, mas o meu computador n√£o conseguiu carregar 3 meses de tabela para fazer o relat√≥rio! Exige muito da mem√≥ria e o sistema simplesmente trava. üòü
# _____________

# Ap√≥s de debater solu√ß√µes com o time, foi decidido que o problema √© o tamanho do que est√° sendo carregado no servidor. N√£o √© poss√≠vel carregar os 300 GB de dados do banco, ent√£o a sa√≠da √© dividir o resultado da consulta em partes menores, pegando uma de cada vez para alimentar a ferramenta de relat√≥rios.

# Antes de come√ßar, faz-se necess√°rio o banco de dados. Para diminuir a complexidade deste exemplo, segue uma pseudo implementa√ß√£o de uma classe que faz a simula√ß√£o do banco de dados:


class DbSimulator:
    def __init__(self):
        # Imagine que estes dados est√£o populados no banco de dados
        self.person_table = [
            {"name": "Morgana", "age": "22"},
            {"name": "Sarah", "age": "24"},
            {"name": "Will", "age": "33"},
            {"name": "Rick", "age": "23"},
            {"name": "John", "age": "22"},
            {"name": "Peter", "age": "35"},
            {"name": "Groove", "age": "48"},
            {"name": "Sam", "age": "19"},
        ]

    # N√£o se preocupe com este m√©todo apenas simula um retorno get do banco.
    def get(self, query, page):
        per_page = 2

        if query == "select * from person":
            first = (page * per_page) - per_page
            last = page * per_page

            return self.person_table[first:last]
