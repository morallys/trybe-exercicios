# Algoritmos que usam solu√ß√µes iterativas

# Solu√ß√µes iterativas consistem na realiza√ß√£o de uma ou mais opera√ß√µes repetidas vezes, por meios de comandos de repeti√ß√£o. As ordena√ß√µes demonstradas acima (sele√ß√£o, inser√ß√£o), s√£o consideradas iterativas, pois estamos realizando opera√ß√µes de compara√ß√£o e troca de elementos repetidas vezes por meios de comandos de repeti√ß√£o (for).

# üëÄDe olho na dica: toda solu√ß√£o iterativa pode ser reescrita de forma recursiva.

# Bubble Sort


def bubble_sort(numbers):
    n = len(numbers)

    for ordered_elements in range(n - 1):  # Precisamos ordenar n-1 elementos
        for item in range(0, n - 1 - ordered_elements):
            # Vamos percorrer at√© o elemento anterior ao ordenado
            if numbers[item] > numbers[item + 1]:
                current_element = numbers[item]

                numbers[item], numbers[item + 1] = numbers[item + 1], current_element

    return numbers


if __name__ == "__main__":
    numbers = [7, 5, 9, 2, 6, 8]
    print(f"Lista inicial: {numbers}")

    ordered_numbers = bubble_sort(numbers)
    print(f"Lista final: {ordered_numbers}")


# Assim como nos algoritmos de for√ßa bruta, no pior caso do Bubble Sort ele executar√° O(n¬≤) opera√ß√µes, ent√£o, ele tamb√©m √© um algoritmo de ordem quadr√°tica. Al√©m disso, √© poss√≠vel observar nas imagens a quantidade de passos para ordenarmos 1 elemento.
