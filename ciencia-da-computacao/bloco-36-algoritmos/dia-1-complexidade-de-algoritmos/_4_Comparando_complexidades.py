# RelembrandoğŸ§ :

# A Ordem de Complexidade diz respeito Ã  taxa de crescimento do tempo de execuÃ§Ã£o (ou espaÃ§o de memÃ³ria ocupado) de um algoritmo, na medida em que aumentamos o tamanho da sua entrada;

# Uma complexidade Ã© O(1) (constante), quando o tempo de execuÃ§Ã£o do algoritmo independe do tamanho da entrada;

# Uma complexidade Ã© O(n) (linear) quando a taxa de crescimento em seu tempo de execuÃ§Ã£o Ã© linear: se aumentamos a entrada em 2 vezes, aumentamos o tempo de execuÃ§Ã£o em 2 vezes;

# Uma complexidade Ã© O(nÂ²) (quadrÃ¡tica) quando a taxa de crescimento do tempo de execuÃ§Ã£o do algoritmo Ã© quadrÃ¡tica: se aumentamos a entrada em 2 vezes, aumentamos o tempo de execuÃ§Ã£o em 4 (ou 2Â²) vezes;

# Uma complexidade Ã© O(nÂ³) (cÃºbica) quando a taxa de crescimento do tempo de execuÃ§Ã£o do algoritmo Ã© cÃºbica: se aumentamos a entrada em 2 vezes, aumentamos o tempo de execuÃ§Ã£o em 8 (2Â³) vezes.


# Para exemplificar, vamos pensar do seguinte modo: para um algoritmo linear, com n = 1000, teremos mil operaÃ§Ãµes a serem realizadas. Quando o algoritmo Ã© O(nÂ²), um n = 1000 gera um milhÃ£o de operaÃ§Ãµes (ou nÂ² de operaÃ§Ãµes). Essa mesma quantidade (um milhÃ£o) para O(nÂ³), se atinge com n = 100.
