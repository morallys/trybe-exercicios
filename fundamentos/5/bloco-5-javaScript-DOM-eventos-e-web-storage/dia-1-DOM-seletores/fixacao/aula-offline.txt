/
 * 1 - Explicações com árvore do DOM (um pouco estranho para mim até agora)
 *      == window -> representa uma janela que contém um elemento DOM;
        == location -> representa a localização do objeto a qual ele está associado, o documento atual;
        == document -> representa qualquer página da web carregada no navegador
        == history -> permite a manipulação do histórico da sessão do navegador
        == element -> tags que estão em arquivos HTML e que se transforma em elementos da árvore DOM;
        == text -> todo texto da tag;
        == atribute -> conteúdo da tag
 *  
    2 - Para acessar o documento HTML no console do navegador, utilizar o comando 'document' dentro do console, com isso, no console terei acesso a toda estrutura e dá acesso ao DOM

    3 - getElementById -> para buscar uma tag dentro do documento.
        Ex: document.getElementById('teste').

            - dessa forma ele irá procurar em todo o documento uma id chamada teste e retorná-la.
            A tag inteira, se for um p:
                <p id="teste"> parágrafo </p>

    4 - .innerHTML ->   para retornar o conteúdo do parágrafo

            Ex: console.log(document.getElementById("teste").innerHTML)

            ATENÇÃO: o innerHTML retorna todo o conteúdo da tag, no exemplo do parágrafo, inclusive tags de negrito e itálico.

    5 - .innerText -> retorna apenas o texto na tag

            Ex: console.log(document.getElementById("teste").innerText)

    6 - .style -> retorna todas os estilos aplicados nesse id

    7 - Para alterar o conteúdo da tag no script para ser persistente em eventual atualização da página no navegador, utilizar a seguinte sintaxe:

        Ex: 
        
            document.getElementById("teste").innerText = "Esse texto será alterado";

    ============= Aula ao vivo =============
    
    8 - getElementByTagName

        Para encontrar todas as tags com um certo nome que tem na página. Será retornado um array(HTML colection) com todas as tags, devem ser acessadas por índice.
 
    9 - getElementByClassName

        Retornará todas as tags com um nome de class espefíca. Será retornado um conjunto (HTMLColection/array) de elementos que possuem a mesma classe.

    10 - .querySelector

        A função retorna APENAS o primeiro elemento do documento. No entanto, pode-se especificar uma seção e pegar o primeiro elemento daquela seção.

            Ex: document.querySelector('.nomeContainer .nomeClasse).style.color = 'red'

            Nesse caso alteraria a cor do elemento que está no nomeContainer, dentro da nomeClasse.

    11 - .querySelectorAll

        
    =========== Voltando a aula off-line ==========    

    12 - getElementByClassName

        realiza uma busca no documento a procura de uma classe com o nome solicitado, ao encontrar, retorna um valor em formato de lista [HTMLColection/array]

        para alterar elementos do getElementByClassName é diferente do getElementById, exemplo abaixo:


            Ex:
                document.getElementsByClassName("nomeClasse")[0].style.backgroundColor = 'green';

                utiliza-se o índice do elemento que quer alterar, ou itera em um loop para alterar todos de uma vez.

    13 - getElementByTagName

        realiza a busca no documento a procura da tag específica e retorna uma lista de elementos [HTMLColection/array], mesmo que só tenha um retorno, sempre sera um retorno com formato de HTMLColection

        eficiente para recuperar e/ou alterar todos os elementos com uma mesma tag

            Ex:
                let subtitulo = document.getElementsByTagName('h4');

                subtitulo[0].style.color = 'blue';
                subtitulo[0].style.textAlign = 'center';

        ATENÇÃO: sempre retornará um array[HTMLColection], e precisará ser acessado com índice.


    14 - querySelector

            - Retorna apenas UM elemento, primeiro elemento que ela encontrar
            - Trabalha com seletores CSS, ou seja, ele se utiliza da mesma sintaxe do CSS, por exemplo, quando precisamos alterar um elemento filho fazendo da mesma forma para encontrar a seleção desejada;

                ex: 
                    document.querySelector('.nomeDaClasse p')

                    Aqui ele buscaria um parágrafo de uma classe

            No querySelector, sempre utilizar o . para 'classe', e a # para 'ids'

            para tags não é necessário inserir nenhuma especificação dentro das aspas.

            - Mais flexível que os getElementBy...

    15 - querySelectorAll

            - [Lista de elementos]

                ====          ATENÇÃO PARA ISSO.          ====
                Diferente dos getElementsBy... que retornava uma HTMLColection, que apenas contém elementos HTML, no caso do querySelectorAll, o mesmo retorna uma NodeList, que pode conter todo tipo de elemento, por exemplo um texto que não necessariamente será um elemento HTML.

                Como em um array, lembrar de especificar o índice da NodeList.

            - Trabalha com seletores CSS

                utilizar as mesmas dicas do querySelector sobre seletores CSS.

            - Mais flexível que os getElementBy...

